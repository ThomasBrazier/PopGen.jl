(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{102:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),l=(a(0),a(143)),c={id:"variantcall",title:"VariantCall.jl",sidebar_label:"VariantCall.jl"},b={unversionedId:"api/variantcall",id:"api/variantcall",isDocsHomePage:!1,title:"VariantCall.jl",description:"openvcf",source:"@site/docs/api/VariantCall.md",slug:"/api/variantcall",permalink:"/PopGen.jl/docs/api/variantcall",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/api/VariantCall.md",version:"current",lastUpdatedAt:1597863030,sidebar_label:"VariantCall.jl",sidebar:"docs",previous:{title:"Utils.jl",permalink:"/PopGen.jl/docs/api/utils"}},i=[{value:"<code>openvcf</code>",id:"openvcf",children:[]},{value:"<code>bcf</code>",id:"bcf",children:[]},{value:"<code>vcf</code>",id:"vcf",children:[]}],o={rightToc:i};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h3",{id:"openvcf"},Object(l.b)("inlineCode",{parentName:"h3"},"openvcf")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"openvcf(::String)\n")),Object(l.b)("p",null,"Open VCF file (",Object(l.b)("inlineCode",{parentName:"p"},".vcf/.gz"),", or ",Object(l.b)("inlineCode",{parentName:"p"},".bcf/.gz"),") and return an ",Object(l.b)("inlineCode",{parentName:"p"},"IO")," stream in reading mode ",Object(l.b)("inlineCode",{parentName:"p"},'"r"'),".\nAdapted from OpenMendel/VCFTools.jl\n",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/OpenMendel/VCFTools.jl/blob/master/src/gtstats.jl#L169"}),"https://github.com/OpenMendel/VCFTools.jl/blob/master/src/gtstats.jl#L169")),Object(l.b)("hr",null),Object(l.b)("h3",{id:"bcf"},Object(l.b)("inlineCode",{parentName:"h3"},"bcf")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"bcf(infile::String; ; rename_snp::Bool, silent::Bool, allow_monomorphic::Bool)\n")),Object(l.b)("p",null,"Load a BCF file into memory as a PopData object. Population information needs to be provided separately. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"infile")," : path to BCF file (can be gzipped)")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Keyword Arguments")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rename_loci"),' : true/false of whether to simplify loci names to "snp_#" (default: ',Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"allow_monomorphic")," : true/false of whether to keep monomorphic loci (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"silent"),": true/false of whether to print extra file information (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),").\nAlleles are recoded according to the following schema:")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Base"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"center"})),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Allele"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"A"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"=>"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"T"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"=>"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"2")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"C"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"=>"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"3")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"G"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"=>"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"4")))),Object(l.b)("h4",{id:"mixed-ploidy-data"},"Mixed-ploidy data"),Object(l.b)("p",null,"If importing mixed-ploidy data (such as poolseq), you will need to perform an additional\nstep to convert the genotype column into the correct ",Object(l.b)("inlineCode",{parentName:"p"},"GenoArray")," type:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-julia"}),'julia> mydata = bcf("path/to/file.bcf", silent = true, rename_loci = true) ;\njulia> mydata.loci.genotype =  mydata.loci.genotype |> Array{Union{Missing, NTuple}}\n')),Object(l.b)("hr",null),Object(l.b)("h3",{id:"vcf"},Object(l.b)("inlineCode",{parentName:"h3"},"vcf")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"vcf(infile::String; ; rename_snp::Bool, silent::Bool, allow_monomorphic::Bool)\n")),Object(l.b)("p",null,"Load a VCF file into memory as a PopData object. Population information needs to be provided separately. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"infile")," : path to VCF file (can be gzipped)")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Keyword Arguments")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rename_loci"),' : true/false of whether to simplify loci names to "snp_#" (default: ',Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"allow_monomorphic")," : true/false of whether to keep monomorphic loci (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"silent"),": true/false of whether to print extra file information (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),").\nAlleles are recoded according to the following schema:")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Base"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"center"})),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Allele"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"A"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"=>"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"1")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"T"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"=>"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"2")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"C"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"=>"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"3")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"G"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"=>"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"4")))),Object(l.b)("h4",{id:"mixed-ploidy-data-1"},"Mixed-ploidy data"),Object(l.b)("p",null,"If importing mixed-ploidy data (such as poolseq), you will need to perform an additional\nstep to convert the genotype column into the correct ",Object(l.b)("inlineCode",{parentName:"p"},"GenoArray")," type:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-julia"}),'julia> mydata = vcf("path/to/file.vcf", silent = true, rename_loci = true) ;\njulia> mydata.loci.genotype =  mydata.loci.genotype |> Array{Union{Missing, NTuple}}\n')))}p.isMDXComponent=!0},143:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},d=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},j={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=n,O=d["".concat(c,".").concat(m)]||d[m]||j[m]||l;return a?r.a.createElement(O,b(b({ref:t},o),{},{components:a})):r.a.createElement(O,b({ref:t},o))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,c=new Array(l);c[0]=m;var b={};for(var i in t)hasOwnProperty.call(t,i)&&(b[i]=t[i]);b.originalType=e,b.mdxType="string"==typeof e?e:n,c[1]=b;for(var o=2;o<l;o++)c[o]=a[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);