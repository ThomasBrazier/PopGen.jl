(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),l=(n(0),n(149)),i={id:"variantcall",title:"VariantCall.jl",sidebar_label:"VariantCall.jl"},c={unversionedId:"api/variantcall",id:"api/variantcall",isDocsHomePage:!1,title:"VariantCall.jl",description:"openvcf",source:"@site/docs/api/VariantCall.md",slug:"/api/variantcall",permalink:"/PopGen.jl/docs/api/variantcall",editUrl:"https://github.com/pdimens/popgen.jl/edit/documentation/docs/api/VariantCall.md",version:"current",lastUpdatedAt:1612465680,sidebar_label:"VariantCall.jl",sidebar:"docs",previous:{title:"Utils.jl",permalink:"/PopGen.jl/docs/api/utils"},next:{title:"VariantCallGz.jl",permalink:"/PopGen.jl/docs/api/variantcallgz"}},o=[{value:"<code>openvcf</code>",id:"openvcf",children:[]},{value:"<code>bcf</code>",id:"bcf",children:[]},{value:"<code>vcf</code>",id:"vcf",children:[]}],b={toc:o};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h3",{id:"openvcf"},Object(l.b)("inlineCode",{parentName:"h3"},"openvcf")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"openvcf(::String)\n")),Object(l.b)("p",null,"Open VCF file (",Object(l.b)("inlineCode",{parentName:"p"},".vcf")," or ",Object(l.b)("inlineCode",{parentName:"p"},".bcf"),") and return an ",Object(l.b)("inlineCode",{parentName:"p"},"IO")," stream in reading mode ",Object(l.b)("inlineCode",{parentName:"p"},'"r"'),"."),Object(l.b)("hr",null),Object(l.b)("h3",{id:"bcf"},Object(l.b)("inlineCode",{parentName:"h3"},"bcf")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"bcf(infile::String; ; rename_snp::Bool, silent::Bool, allow_monomorphic::Bool)\n")),Object(l.b)("p",null,"Load a BCF file into memory as a PopData object. Population information needs to be provided separately. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"infile")," : path to BCF file (can be gzipped)")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Keyword Arguments")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rename_loci"),' : true/false of whether to simplify loci names to "snp_#" (default: ',Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"allow_monomorphic")," : true/false of whether to keep monomorphic loci (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"silent"),": true/false of whether to print extra file information (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),").\nAlleles are recoded according to the following schema:")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Base"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"A"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"T"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"C"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"G"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(l.b)("strong",{parentName:"td"},"Allele")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"1"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"2"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"3"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"4")))),Object(l.b)("h4",{id:"mixed-ploidy-data"},"Mixed-ploidy data"),Object(l.b)("p",null,"If importing mixed-ploidy data (such as poolseq), you will need to perform an additional\nstep to convert the genotype column into the correct ",Object(l.b)("inlineCode",{parentName:"p"},"GenoArray")," type:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-julia"}),'julia> mydata = bcf("path/to/file.bcf", silent = true, rename_loci = true) ;\njulia> mydata.loci.genotype =  mydata.loci.genotype |> Array{Union{Missing, NTuple}}\n')),Object(l.b)("hr",null),Object(l.b)("h3",{id:"vcf"},Object(l.b)("inlineCode",{parentName:"h3"},"vcf")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"vcf(infile::String; ; rename_snp::Bool, silent::Bool, allow_monomorphic::Bool)\n")),Object(l.b)("p",null,"Load a VCF file into memory as a PopData object. Population information needs to be provided separately. "),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"infile")," : path to VCF file (can be gzipped)")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Keyword Arguments")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rename_loci"),' : true/false of whether to simplify loci names to "snp_#" (default: ',Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"allow_monomorphic")," : true/false of whether to keep monomorphic loci (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),")"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"silent"),": true/false of whether to print extra file information (default: ",Object(l.b)("inlineCode",{parentName:"li"},"false"),").\nAlleles are recoded according to the following schema:")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Base"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"A"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"T"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"C"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"G"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(l.b)("strong",{parentName:"td"},"Allele")),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"1"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"2"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"3"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"4")))),Object(l.b)("h4",{id:"mixed-ploidy-data-1"},"Mixed-ploidy data"),Object(l.b)("p",null,"If importing mixed-ploidy data (such as poolseq), you will need to perform an additional\nstep to convert the genotype column into the correct ",Object(l.b)("inlineCode",{parentName:"p"},"GenoArray")," type:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-julia"}),'julia> mydata = vcf("path/to/file.vcf", silent = true, rename_loci = true) ;\njulia> mydata.loci.genotype =  mydata.loci.genotype |> Array{Union{Missing, NTuple}}\n')))}p.isMDXComponent=!0},149:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},j=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),d=p(n),j=a,O=d["".concat(i,".").concat(j)]||d[j]||m[j]||l;return n?r.a.createElement(O,c(c({ref:t},b),{},{components:n})):r.a.createElement(O,c({ref:t},b))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=j;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var b=2;b<l;b++)i[b]=n[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}j.displayName="MDXCreateElement"}}]);